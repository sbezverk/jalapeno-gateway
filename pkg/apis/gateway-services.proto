syntax = "proto3";

import "google/protobuf/any.proto";
import "google/protobuf/empty.proto";

package apis;

// Errors defines error codes which a gateway can return to a client
enum GatewayErrors {
  OK = 0;
  // Returned when a gateway encountered a generic error
  EIO = 1;
  // Returned when request key does not exist
  ENOENT = 2;
  // Returned when an operation triggered by the client's requested timed out
  // and was canceled
  ETIMEDOUT = 3;
  // Returned when a gateway cannot reach a DB host
  EHOSTDOWN = 4;
}

message RouteDistinguisherTwoOctetAS {
  uint32 admin = 1;
  uint32 assigned = 2;
}
message RouteDistinguisherIPAddress {
  string admin = 1;
  uint32 assigned = 2;
}
message RouteDistinguisherFourOctetAS {
  uint32 admin = 1;
  uint32 assigned = 2;
}
message TwoOctetAsSpecificExtended {
  bool is_transitive = 1;
  uint32 sub_type = 2;
  uint32 as = 3;
  uint32 local_admin = 4;
}

message IPv4AddressSpecificExtended {
  bool is_transitive = 1;
  uint32 sub_type = 2;
  string address = 3;
  uint32 local_admin = 4;
}

message FourOctetAsSpecificExtended {
  bool is_transitive = 1;
  uint32 sub_type = 2;
  uint32 as = 3;
  uint32 local_admin = 4;
}

// https://tools.ietf.org/html/draft-dawra-bess-srv6-services-02#section-2.1.1
message SRv6StructureSubSubTLV {
  uint32 local_block_length = 1;
  uint32 local_node_length = 2;
  uint32 function_length = 3;
  uint32 argument_length = 4;
  uint32 transposition_length = 5;
  uint32 transposition_offset = 6;
}

message SRv6SIDFlags {
  // Placeholder for future sid flags
  bool flag_1 = 1;
}

message SRv6TLV { repeated google.protobuf.Any tlv = 1; }

// https://tools.ietf.org/html/draft-dawra-bess-srv6-services-02#section-2.1.1
message SRv6InformationSubTLV {
  bytes sid = 1;
  SRv6SIDFlags flags = 2;
  uint32 endpoint_behavior = 3;
  // SRv6TLV is one of:
  // - SRv6StructureSubSubTLV
  map<uint32, SRv6TLV> sub_sub_tlvs = 4;
}

// https://tools.ietf.org/html/draft-dawra-bess-srv6-services-02#section-2
message SRv6L3ServiceTLV {
  // SRv6TLV is one of:
  // - SRv6InformationSubTLV
  map<uint32, SRv6TLV> sub_tlvs = 1;
}

// https://tools.ietf.org/html/rfc8669
message PrefixSID {
  // tlv is one of:
  // - IndexLabelTLV Type 1 (not yet implemented)
  // - OriginatorSRGBTLV Type 3 (not yet implemented)
  // - SRv6L3ServiceTLV Type 5
  // - SRv6L2ServiceTLV Type 6 (not yet implemented)
  repeated google.protobuf.Any tlvs = 1;
}

message Prefix {
  bytes address = 1;
  uint32 mask_length = 2;
}

message SRv6L3Prefix {
  Prefix prefix = 1;
  // Source Autonomous System Number
  uint32 asn = 2;
  // VPN Prefix's Next hop address
  bytes nh_address = 3;
  // VPN Prefix's RD
  google.protobuf.Any rd = 4;
  // VPN Prefix's RTs
  repeated google.protobuf.Any rt = 5;
  // VPN Prefix's Prefix SID
  PrefixSID prefix_sid = 6;
}
// RequestVPN call used to request L3 VPN entries, identified by one Route
// Distinguisher which can be one of listed below types, and one or more Route
// Targets.
message L3VPNRequest {
  // Route Distinguisher must be one of
  // RouteDistinguisherTwoOctetAS,
  // RouteDistinguisherIPAddressAS,
  // or RouteDistinguisherFourOctetAS.
  // Mandatory parameter
  google.protobuf.Any rd = 1;
  // Identifies if request sent for ipv4 prefixes in this case this field should
  // be set to true or ipv6, in this case this field should be set to false
  bool ipv4 = 2;
  // List of the Route Targets. Each must be one of
  // TwoOctetAsSpecificExtended,
  // IPv4AddressSpecificExtended,
  // or FourOctetAsSpecificExtended.
  // Optional parameter
  repeated google.protobuf.Any rt = 3;
  // vpn_prefix is L3 VPN prefix which vpn label is requested for.
  // Optional parameter
  Prefix vpn_prefix = 4;
}

message L3VPNResponse {
  // Identifies if a response carries ipv4 prefixes in this case this field is
  // set to true or ipv6, in this case this field is set to false
  bool ipv4 = 1;
  repeated VPNPrefix vpn_prefix = 2;
}
// VPNv4Prefix defines a collection of VPNv4 prefixes, used in AdvBGPVPNv4 to
// advertise VPNv4 prefixes and in WdBGPVPNv4 to withdraw them.
message VPNv4Prefix { repeated VPNPrefix prefix = 1; }
// GatewayService lists rpc services supported by the gateway api
service GatewayService {
  // API to request L3 VPN label and list of prefixes for VRF specified by RD.
  // Optionally RT and/or Prefix can be specified as additional selections
  // creterias.
  rpc L3VPN(L3VPNRequest) returns (L3VPNResponse);
  // API to advertise VPNv4 Prefix(s), no response other than Success or Failure
  // is generated
  rpc AdvBGPVPNv4(VPNv4Prefix) returns (google.protobuf.Empty);
  // API to withdraw VPNv4 Prefix(s), no response other than Success or Failure
  // is generated
  rpc WdBGPVPNv4(VPNv4Prefix) returns (google.protobuf.Empty);
}