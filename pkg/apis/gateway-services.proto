syntax = "proto3";

import "google/protobuf/any.proto";
import "google/protobuf/empty.proto";
import "base.proto";
import "prefixsid.proto";
import "mpls.proto";
import "bgp.proto";

package apis;

// L3VpnRequest defines a structure of a request for the prefixes
// which belons to a specific VPN, identified by the route distingusiher.
// Further selection criteria includes: family ipv6/ipv6, a list of route
// targets or a specific vpn prefix.
message L3VpnRequest {
  // id is a unique identificator of a gateway client.
  bytes id = 1;
  // RD identifies the vpn route distinguisher, it is a mandatory parameter
  google.protobuf.Any rd = 2;
  // Identifies if request sent for ipv4 prefixes in this case this field should
  // be set to true or ipv6, in this case this field should be set to false.
  bool ipv4 = 3;
  // Route Targets is optional filtering parameter.
  repeated google.protobuf.Any rt = 4;
  // Prefix is optional filtering parameter.
  apis.Prefix vpn_prefix = 5;
}

message Client {
  // id is a unique identificator of a gateway client.
  bytes id = 1;
}

message SRv6L3Response { repeated apis.SRv6L3Prefix srv6_prefix = 1; }

message MPLSL3Response { repeated apis.MPLSL3Prefix mpls_prefix = 1; }

// GatewayService lists rpc services supported by the gateway api
service GatewayService {
  rpc Monitor(stream Client) returns (google.protobuf.Empty);
  rpc MPLSL3VPN(L3VpnRequest) returns (MPLSL3Response);
  rpc SRv6L3VPN(L3VpnRequest) returns (SRv6L3Response);
  rpc AddIPv6UnicatRoute(IPv6UnicastRoute) returns (google.protobuf.Empty);
  rpc DelIPv6UnicatRoute(IPv6UnicastRoute) returns (google.protobuf.Empty);
}